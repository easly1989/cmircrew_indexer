name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run tests with coverage
      run: |
        python -m pytest --cov=src --cov-report=xml --cov-report=term-missing
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install linting dependencies
      run: |
        pip install black flake8 mypy isort
    - name: Run Black (code formatting)
      run: black --check --diff src/ tests/
    - name: Run isort (import sorting)
      run: isort --check-only --diff src/ tests/
    - name: Run Flake8 (style guide)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    - name: Run MyPy (type checking)
      run: mypy src/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install build dependencies
      run: |
        pip install build twine
    - name: Build package
      run: python -m build
    - name: Check package
      run: python -m twine check dist/*

  docker:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and test Docker image
      run: |
        docker build -t mircrew-indexer:test .
        docker run --rm mircrew-indexer:test python -c "import mircrew; print('Import successful')"
    - name: Run health check in container
      run: |
        docker run -d --name test-container -p 9118:9118 mircrew-indexer:test
        sleep 5
        curl -f http://localhost:9118/health || exit 1
        docker stop test-container
        docker rm test-container

  integration:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    - name: Run integration tests only
      run: |
        python -m pytest tests/integration/ -v --tb=short
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: integration-test-results
        path: htmlcov/

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install security tools
      run: |
        pip install bandit safety
    - name: Run Bandit (security linting)
      run: bandit -r src/ --exclude-dir tests
    - name: Run Safety (vulnerability checking)
      run: safety check

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest-benchmark
    - name: Run performance tests
      run: |
        python -m pytest tests/unit/::TestMagnetUnlocker --benchmark-only
        python -m pytest tests/unit/::TestAPIRoutes --benchmark-only